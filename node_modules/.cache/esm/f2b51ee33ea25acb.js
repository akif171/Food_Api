let Joi,RefreshToken,User,CustomErrorHandler,bcrypt,JwtService,REFRESH_SECRET;_3ea‍.x([["default",()=>_3ea‍.o]]);_3ea‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_3ea‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_3ea‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_3ea‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_3ea‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_3ea‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const loginController = {
  async login(req, res, next) {
    //Validation
    const loginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
    });

    const { error } = loginSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    try {
      const user = await User.findOne({ email: req.body.email });

      if (!user) {
        return next(CustomErrorHandler.wrongCredentials());
      }

      //Compare the Password
      const match = await bcrypt.compare(req.body.password, user.password);

      if (!match) {
        return next(CustomErrorHandler.wrongCredentials());
      }

      //Token
      const access_token = JwtService.sign({
        _id: user._id,
        role: user.role,
      });

      const refresh_token = JwtService.sign(
        { _id: user._id, role: user.role },
        "1y",
        REFRESH_SECRET
      );

      //database whitelist
      await RefreshToken.create({ token: refresh_token });

      res.json({ access_token, refresh_token });
    } catch (error) {
      _3ea‍.g.console.log(error);
      return next(error);
    }
  },

  async logout(req, res, next) {
    //validatation
    const refreshSchema = Joi.object({
      refresh_token: Joi.string().required(),
    });

    const { error } = refreshSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    try {
      await RefreshToken.deleteOne({ token: req.body.refresh_token });
    } catch (err) {
      return next(new Error("Something went wrong in the database"));
    }

    res.json({ status: 1 });
  },
};

_3ea‍.d(loginController);
